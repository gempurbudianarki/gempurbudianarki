import os
from urllib.parse import urlencode

# =====================================================================================
# == RENCANA BARU: Link Gambar Langsung dari Repo Trinib (Anti-Gagal) ==
# =====================================================================================
# Bro, ini adalah link gambar baru yang kita todong langsung dari repo 'trinib'.
# Kita pakai aset game catur dan connect four mereka sebagai ikon status kita.
# Ini lebih cerdas dan gak perlu download/upload.
# =====================================================================================
IMAGE_ASSETS = {
    "main_banner": "https://raw.githubusercontent.com/trinib/trinib/main/images/terminal.gif",
    "server_web": "https://raw.githubusercontent.com/trinib/trinib/main/img/white/rook.png",
    "server_db": "https://raw.githubusercontent.com/trinib/trinib/main/img/white/knight.png",
    "server_mail": "https://raw.githubusercontent.com/trinib/trinib/main/img/white/bishop.png",
    "status": {
        "UNSCANNED": "https://raw.githubusercontent.com/trinib/trinib/main/img/blank.png",
        "SECURE": "https://raw.githubusercontent.com/trinib/trinib/main/img/yellow.png", # Anggap kuning sebagai 'aman'
        "MEDIUM": "https://raw.githubusercontent.com/trinib/trinib/main/img/red.png",    # Anggap merah sebagai 'medium'
        "CRITICAL": "https://raw.githubusercontent.com/trinib/trinib/main/img/black/king.png" # King hitam sebagai 'critical'
    }
}
# =====================================================================================

def _create_issue_link(text, server_index):
    """
    Membuat URL untuk membuat issue baru, yang berfungsi sebagai tombol 'scan'.
    """
    server_names = ["Web Server", "Database Server", "Mail Server"]
    title = f"VA: Run Scan on {server_names[server_index]}"
    body = "This issue was automatically generated by clicking a link on the profile README. Please submit it to run the scan."
    params = urlencode({'title': title, 'body': body})
    repo_path = os.environ.get('GITHUB_REPOSITORY', 'gempurbudianarki/gempurbudianarki')
    issue_url = f"https://github.com/{repo_path}/issues/new?{params}"
    return f"[{text}]({issue_url})"

def generate_va_board(assessment):
    """
    Fungsi utama untuk 'menggambar' papan simulasi dalam format Markdown.
    """
    markdown = "<table align='center'>\n"
    server_names = [s['name'] for s in assessment.servers]
    server_image_keys = ["server_web", "server_db", "server_mail"]

    # Baris 1: Judul Server sebagai Tombol Scan
    markdown += "  <tr>\n"
    for i, name in enumerate(server_names):
        link = _create_issue_link(f"Scan {name}", i)
        markdown += f"    <td align='center' width='33%'><b>{link}</b></td>\n"
    markdown += "  </tr>\n"

    # Baris 2: Gambar Ikon Server (dari aset catur)
    markdown += "  <tr>\n"
    for key in server_image_keys:
        markdown += f"    <td align='center'><img src='{IMAGE_ASSETS[key]}' width='60' alt='{key} icon'></td>\n"
    markdown += "  </tr>\n"
    
    # Baris 3: Gambar Status & Teks Hasil Scan (dari aset connect four)
    markdown += "  <tr>\n"
    for server in assessment.servers:
        if server['status'] == 'SCANNED':
            status_code = server.get('result_code', 'UNSCANNED')
            scan_result_text = server.get('result_text', 'Status: Error')
        else:
            status_code = 'UNSCANNED'
            scan_result_text = 'Status: Not Scanned'
            
        status_image_url = IMAGE_ASSETS['status'].get(status_code)
        markdown += f"    <td align='center' style='padding-top: 5px;'><img src='{status_image_url}' width='50px' alt='{status_code} status'><br><small>`{scan_result_text}`</small></td>\n"
    markdown += "  </tr>\n"

    markdown += "</table>"
    return markdown

def generate_last_scans(assessment):
    """Menghasilkan daftar 5 aktivitas scan terakhir."""
    if not assessment.last_scans:
        return "- Belum ada aktivitas scan."
    return "<br>".join([f"- {scan}" for scan in assessment.last_scans])

def generate_top_operators(assessment):
    """Menghasilkan daftar 5 operator teratas."""
    if not assessment.scanners:
        return "- Belum ada operator yang berpartisipasi."
    
    sorted_scanners = sorted(assessment.scanners.items(), key=lambda item: item[1], reverse=True)[:5]
    
    return "<br>".join([f"- **{scanner}**: {count} scans" for scanner, count in sorted_scanners])